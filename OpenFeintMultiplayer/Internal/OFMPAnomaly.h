///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//  Copyright 2010 Aurora Feint, Inc.
// 
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//  
//  	http://www.apache.org/licenses/LICENSE-2.0
//  	
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
// 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#import <Foundation/Foundation.h>
/**
    This namespace is used to store the constants for the Anomaly system.   These are special commands to the server which
can be generated by any player and are used to handle situations like player dropouts.   The TIME_OUT reason is not implemented, and
should not be used until further notice.
 
    Generally, the only public use of this namespace is reasons for the [OFMultiplayerService force___] methods.
 */
///Holds reasons for anomalous game state changes
namespace Anomaly {
    
    enum {
        ACTION_RESIGN=0,
        ACTION_END_TURN=1,
        ACTION_FINISH_GAME=2
    };    
};
/*
    These objects are created by the [OFMultiplayerService force___] methods.
 They are not usually exposed to the game level interface.
 */
///Anomaly class is used internally to the system
@interface OFMPAnomaly : NSObject
{
    NSUInteger reason;
    NSUInteger action;
    NSUInteger player;
    NSUInteger nextPlayer;
    NSArray* finishStates;
}
///use the Anomaly namespace to fill this information
@property (nonatomic) NSUInteger reason;
///the action to take if the reason and current player match
@property (nonatomic) NSUInteger action;
///use the player which is to be affected
@property (nonatomic) NSUInteger player;
///if the player is the current player, this holds the new player to switch to
@property (nonatomic) NSUInteger nextPlayer;
///a list of final ranks when ending the game
@property (nonatomic,retain) NSArray* finishStates;

@end
